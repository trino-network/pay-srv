// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Invoice is an object representing the database table.
type Invoice struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title     string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Network   string      `boil:"network" json:"network" toml:"network" yaml:"network"`
	Recipient string      `boil:"recipient" json:"recipient" toml:"recipient" yaml:"recipient"`
	Amount    null.Int64  `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	JumpURL   string      `boil:"jump_url" json:"jump_url" toml:"jump_url" yaml:"jump_url"`
	NotifyURL string      `boil:"notify_url" json:"notify_url" toml:"notify_url" yaml:"notify_url"`
	Status    string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Metadata  string      `boil:"metadata" json:"metadata" toml:"metadata" yaml:"metadata"`
	TXNHash   null.String `boil:"txn_hash" json:"txn_hash,omitempty" toml:"txn_hash" yaml:"txn_hash,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *invoiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceColumns = struct {
	ID        string
	UserID    string
	Title     string
	Network   string
	Recipient string
	Amount    string
	JumpURL   string
	NotifyURL string
	Status    string
	Metadata  string
	TXNHash   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	Title:     "title",
	Network:   "network",
	Recipient: "recipient",
	Amount:    "amount",
	JumpURL:   "jump_url",
	NotifyURL: "notify_url",
	Status:    "status",
	Metadata:  "metadata",
	TXNHash:   "txn_hash",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var InvoiceTableColumns = struct {
	ID        string
	UserID    string
	Title     string
	Network   string
	Recipient string
	Amount    string
	JumpURL   string
	NotifyURL string
	Status    string
	Metadata  string
	TXNHash   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "invoices.id",
	UserID:    "invoices.user_id",
	Title:     "invoices.title",
	Network:   "invoices.network",
	Recipient: "invoices.recipient",
	Amount:    "invoices.amount",
	JumpURL:   "invoices.jump_url",
	NotifyURL: "invoices.notify_url",
	Status:    "invoices.status",
	Metadata:  "invoices.metadata",
	TXNHash:   "invoices.txn_hash",
	CreatedAt: "invoices.created_at",
	UpdatedAt: "invoices.updated_at",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InvoiceWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperstring
	Title     whereHelperstring
	Network   whereHelperstring
	Recipient whereHelperstring
	Amount    whereHelpernull_Int64
	JumpURL   whereHelperstring
	NotifyURL whereHelperstring
	Status    whereHelperstring
	Metadata  whereHelperstring
	TXNHash   whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"invoices\".\"id\""},
	UserID:    whereHelperstring{field: "\"invoices\".\"user_id\""},
	Title:     whereHelperstring{field: "\"invoices\".\"title\""},
	Network:   whereHelperstring{field: "\"invoices\".\"network\""},
	Recipient: whereHelperstring{field: "\"invoices\".\"recipient\""},
	Amount:    whereHelpernull_Int64{field: "\"invoices\".\"amount\""},
	JumpURL:   whereHelperstring{field: "\"invoices\".\"jump_url\""},
	NotifyURL: whereHelperstring{field: "\"invoices\".\"notify_url\""},
	Status:    whereHelperstring{field: "\"invoices\".\"status\""},
	Metadata:  whereHelperstring{field: "\"invoices\".\"metadata\""},
	TXNHash:   whereHelpernull_String{field: "\"invoices\".\"txn_hash\""},
	CreatedAt: whereHelpertime_Time{field: "\"invoices\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"invoices\".\"updated_at\""},
}

// InvoiceRels is where relationship names are stored.
var InvoiceRels = struct {
}{}

// invoiceR is where relationships are stored.
type invoiceR struct {
}

// NewStruct creates a new relationship struct
func (*invoiceR) NewStruct() *invoiceR {
	return &invoiceR{}
}

// invoiceL is where Load methods for each relationship are stored.
type invoiceL struct{}

var (
	invoiceAllColumns            = []string{"id", "user_id", "title", "network", "recipient", "amount", "jump_url", "notify_url", "status", "metadata", "txn_hash", "created_at", "updated_at"}
	invoiceColumnsWithoutDefault = []string{"user_id", "title", "network", "recipient", "amount", "jump_url", "notify_url", "status", "metadata", "created_at", "updated_at"}
	invoiceColumnsWithDefault    = []string{"id", "txn_hash"}
	invoicePrimaryKeyColumns     = []string{"id"}
)

type (
	// InvoiceSlice is an alias for a slice of pointers to Invoice.
	// This should almost always be used instead of []Invoice.
	InvoiceSlice []*Invoice

	invoiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceType                 = reflect.TypeOf(&Invoice{})
	invoiceMapping              = queries.MakeStructMapping(invoiceType)
	invoicePrimaryKeyMapping, _ = queries.BindMapping(invoiceType, invoiceMapping, invoicePrimaryKeyColumns)
	invoiceInsertCacheMut       sync.RWMutex
	invoiceInsertCache          = make(map[string]insertCache)
	invoiceUpdateCacheMut       sync.RWMutex
	invoiceUpdateCache          = make(map[string]updateCache)
	invoiceUpsertCacheMut       sync.RWMutex
	invoiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single invoice record from the query.
func (q invoiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Invoice, error) {
	o := &Invoice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoices")
	}

	return o, nil
}

// All returns all Invoice records from the query.
func (q invoiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceSlice, error) {
	var o []*Invoice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Invoice slice")
	}

	return o, nil
}

// Count returns the count of all Invoice records in the query.
func (q invoiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoices exists")
	}

	return count > 0, nil
}

// Invoices retrieves all the records using an executor.
func Invoices(mods ...qm.QueryMod) invoiceQuery {
	mods = append(mods, qm.From("\"invoices\""))
	return invoiceQuery{NewQuery(mods...)}
}

// FindInvoice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoice(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Invoice, error) {
	invoiceObj := &Invoice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoices\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invoiceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoices")
	}

	return invoiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Invoice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceInsertCacheMut.RLock()
	cache, cached := invoiceInsertCache[key]
	invoiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoices")
	}

	if !cached {
		invoiceInsertCacheMut.Lock()
		invoiceInsertCache[key] = cache
		invoiceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Invoice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Invoice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	invoiceUpdateCacheMut.RLock()
	cache, cached := invoiceUpdateCache[key]
	invoiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, append(wl, invoicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoices")
	}

	if !cached {
		invoiceUpdateCacheMut.Lock()
		invoiceUpdateCache[key] = cache
		invoiceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Invoice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceUpsertCacheMut.RLock()
	cache, cached := invoiceUpsertCache[key]
	invoiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invoices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(invoicePrimaryKeyColumns))
			copy(conflict, invoicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invoices")
	}

	if !cached {
		invoiceUpsertCacheMut.Lock()
		invoiceUpsertCache[key] = cache
		invoiceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Invoice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Invoice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Invoice provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoicePrimaryKeyMapping)
	sql := "DELETE FROM \"invoices\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoices")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Invoice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoices\".* FROM \"invoices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceSlice")
	}

	*o = slice

	return nil
}

// InvoiceExists checks if the Invoice row exists.
func InvoiceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoices\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoices exists")
	}

	return exists, nil
}
